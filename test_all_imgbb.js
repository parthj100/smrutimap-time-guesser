import { createClient } from "@supabase/supabase-js"; const supabase = createClient("https://rhxbadjyjjjrjpvfhpap.supabase.co", "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InJoeGJhZGp5ampqcmpwdmZocGFwIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDc5NDUyMTUsImV4cCI6MjA2MzUyMTIxNX0.Z7sfOz6dgSgjKyJspwoYPz4gbJwYRe8zxpNYV_YeonA"); async function testAllDirectImgBB() { console.log("üß™ Testing all direct ImgBB URLs in database...\n"); const { data, error } = await supabase.from("game_images").select("id, image_url, location_name, year").ilike("image_url", "%i.ibb.co%"); if (error) { console.log("‚ùå Error:", error); return; } console.log(`üìä Found ${data.length} direct ImgBB URLs to test\n`); let workingCount = 0; let brokenCount = 0; for (let i = 0; i < data.length; i++) { const img = data[i]; console.log(`üîÑ [${i+1}/${data.length}] Testing: ${img.location_name} (${img.year})`); try { const response = await fetch(img.image_url, { method: "HEAD" }); if (response.ok && response.headers.get("content-type")?.includes("image")) { console.log(`   ‚úÖ Working - ${response.status} ${response.statusText}`); workingCount++; } else { console.log(`   ‚ùå Issue - ${response.status} ${response.statusText}`); brokenCount++; } } catch (error) { console.log(`   ‚ùå Error - ${error.message}`); brokenCount++; } await new Promise(resolve => setTimeout(resolve, 200)); } console.log(`\nüìà RESULTS:`); console.log(`‚úÖ Working ImgBB URLs: ${workingCount}`); console.log(`‚ùå Broken ImgBB URLs: ${brokenCount}`); console.log(`üìä Total tested: ${workingCount + brokenCount}`); if (workingCount > 0) { console.log(`\nüéâ SUCCESS! ${workingCount} ImgBB images should now load in your game!`); } } testAllDirectImgBB();
